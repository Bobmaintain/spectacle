name: CI

defaults:
  run:
    working-directory: ./docs

# Compiles and deploys documentation on:
#   every push on the main branch that has a change in the docs folder
#   every pull request with main branch as the base and has a change in the docs folder
on:
  push:
    branches:
      - main
    paths:
      - 'docs/**'
  pull_request:
    branches:
      - main
    paths:
      - 'docs/**'

jobs:
  docs:
    name: Build the docs
    # TODO: Switch to `ubuntu-latest` when GH internal migration complete
    # because it has awscli@2 built in.
    # See `ubuntu-latest` note in: https://docs.github.com/en/actions/reference/specifications-for-github-hosted-runners#supported-runners-and-hardware-resources
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2

      - name: Get yarn cache directory path
        id: cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - uses: actions/cache@v2
        id: cache # use this to check for `cache-hit` (`steps.cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      # install dependencies if cache not found (deps have updated)
      - name: Installation
        if: steps.cache.outputs.cache-hit != 'true'
        run: yarn install --frozen-lockfile --non-interactive

      - name: Check Code
        run: yarn check-ci

      - name: Clean Code
        run: yarn clean

      - name: Build Docs
        run: yarn build

      # deploy to staging if the branch is not main
      - name: Deploy Docs (staging)
        if: github.ref != 'refs/heads/main'
        run: yarn deploy:stage
        env:
          FORMIDEPLOY_GIT_SHA: ${{ github.event.pull_request.head.sha }}
          GITHUB_DEPLOYMENT_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SURGE_LOGIN: ${{ secrets.SURGE_LOGIN }}
          SURGE_TOKEN: ${{ secrets.SURGE_TOKEN }}

      # deploy to production only if the branch is main
      - name: Deploy docs (production)
        if: github.ref == 'refs/heads/main'
        run: yarn run deploy:prod
        env:
          GITHUB_DEPLOYMENT_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

